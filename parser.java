
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 08 17:16:57 GMT 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 08 17:16:57 GMT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\003\003\000\002\004\005\000\002" +
    "\004\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\004\000\002\022\005" +
    "\000\002\022\005\000\002\014\003\000\002\014\005\000" +
    "\002\031\003\000\002\031\005\000\002\024\005\000\002" +
    "\024\005\000\002\015\003\000\002\015\005\000\002\027" +
    "\003\000\002\027\005\000\002\023\005\000\002\023\005" +
    "\000\002\016\003\000\002\016\005\000\002\030\003\000" +
    "\002\030\005\000\002\025\005\000\002\025\005\000\002" +
    "\017\003\000\002\017\005\000\002\026\003\000\002\026" +
    "\005\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\032\003\000\002\032\005\000\002\037\006\000\002" +
    "\034\003\000\002\034\007\000\002\034\011\000\002\036" +
    "\002\000\002\036\003\000\002\035\002\000\002\035\003" +
    "\000\002\040\006\000\002\040\006\000\002\041\006\000" +
    "\002\042\010\000\002\042\007\000\002\042\007\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\047\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\052\003" +
    "\000\002\052\003\000\002\057\003\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\067\015\000\002\070\014" +
    "\000\002\075\004\000\002\072\005\000\002\072\007\000" +
    "\002\073\003\000\002\073\005\000\002\074\006\000\002" +
    "\060\006\000\002\060\006\000\002\060\006\000\002\061" +
    "\012\000\002\062\006\000\002\063\002\000\002\063\003" +
    "\000\002\064\012\000\002\065\012\000\002\066\005\000" +
    "\002\066\005\000\002\077\003\000\002\077\004\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\100\004\000\002\100\003\000\002\010\003" +
    "\000\002\010\004\000\002\007\007\000\002\011\003\000" +
    "\002\011\005\000\002\006\005\000\002\101\004\000\002" +
    "\101\005\000\002\076\003\000\002\076\003\000\002\102" +
    "\005\000\002\103\007\000\002\103\007\000\002\103\007" +
    "\000\002\103\007\000\002\103\007\000\002\103\007\000" +
    "\002\103\007\000\002\103\007\000\002\020\003\000\002" +
    "\020\004\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\014\017\014\045\013\047\004\050\005\051" +
    "\022\001\002\000\004\035\354\001\002\000\004\033\345" +
    "\001\002\000\010\011\333\027\060\040\064\001\002\000" +
    "\020\002\uff82\017\uff82\034\uff82\045\uff82\047\uff82\050\uff82" +
    "\051\uff82\001\002\000\020\002\uff7e\017\uff7e\034\uff7e\045" +
    "\uff7e\047\uff7e\050\uff7e\051\uff7e\001\002\000\054\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\027\uffff\030" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\001\002\000\054\004\000\005\000\006\000\007\000" +
    "\010\000\011\000\027\000\030\000\036\000\037\000\040" +
    "\000\041\000\054\000\055\000\056\000\057\000\060\000" +
    "\061\000\062\000\063\000\064\000\001\002\000\004\035" +
    "\215\001\002\000\056\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\027\ufff7\030\ufff7\035\206\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\001\002\000" +
    "\020\002\uff7b\017\uff7b\034\uff7b\045\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\001\002\000\004\037\205\001\002\000\054\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\027\ufff5" +
    "\030\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\001\002\000\016\002\203\017\014\045\013\047" +
    "\004\050\005\051\022\001\002\000\020\002\uff7f\017\uff7f" +
    "\034\uff7f\045\uff7f\047\uff7f\050\uff7f\051\uff7f\001\002\000" +
    "\014\012\041\013\046\017\014\035\036\040\033\001\002" +
    "\000\020\002\uff80\017\uff80\034\uff80\045\uff80\047\uff80\050" +
    "\uff80\051\uff80\001\002\000\020\002\uff7d\017\uff7d\034\uff7d" +
    "\045\uff7d\047\uff7d\050\uff7d\051\uff7d\001\002\000\010\030" +
    "\uffa0\036\uffa0\037\uffa0\001\002\000\010\030\uff97\036\uff97" +
    "\037\uff97\001\002\000\042\010\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\030\ufff2\032\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\001" +
    "\002\000\012\010\200\030\uff96\036\uff96\037\uff96\001\002" +
    "\000\016\030\uffa1\036\uffa1\037\uffa1\054\065\055\052\056" +
    "\063\001\002\000\042\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\030\ufff3\032\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002" +
    "\000\014\012\147\013\132\014\135\040\146\041\140\001" +
    "\002\000\042\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\030\ufff1\032\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002\000\042" +
    "\004\055\005\061\006\051\007\053\030\uffab\036\uffab\037" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\001\002\000\012\012\041\013" +
    "\046\017\014\035\036\001\002\000\044\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\030\uffbd\036\uffbd\037\uffbd\041\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\001\002\000\004\037\126\001\002\000" +
    "\044\004\uffbb\005\uffbb\006\uffbb\007\uffbb\030\uffbb\036\uffbb" +
    "\037\uffbb\041\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\016" +
    "\057\117\060\122\061\121\062\120\063\115\064\123\001" +
    "\002\000\004\010\112\001\002\000\034\004\055\005\061" +
    "\006\051\007\053\030\uff98\036\uff98\037\uff98\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\042" +
    "\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\030\ufff4\032\ufff4\036\ufff4\037\ufff4\040\ufff4\045\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\001\002\000\044\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\030\uffbc\036\uffbc\037\uffbc\041\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\001\002\000\012\010\uff9f\030\uff9f" +
    "\036\uff9f\037\uff9f\001\002\000\044\004\055\005\061\006" +
    "\051\007\053\010\056\027\060\037\054\040\064\054\065" +
    "\055\052\056\063\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\001\002\000\010\012\uffc0\013\uffc0\017\uffc0" +
    "\001\002\000\012\012\uffa7\013\uffa7\017\uffa7\035\uffa7\001" +
    "\002\000\010\012\uffbf\013\uffbf\017\uffbf\001\002\000\020" +
    "\002\uff83\017\uff83\034\uff83\045\uff83\047\uff83\050\uff83\051" +
    "\uff83\001\002\000\010\012\uffc1\013\uffc1\017\uffc1\001\002" +
    "\000\006\017\111\040\033\001\002\000\010\012\041\013" +
    "\046\017\014\001\002\000\004\017\104\001\002\000\010" +
    "\012\uffbe\013\uffbe\017\uffbe\001\002\000\012\012\041\013" +
    "\046\017\014\035\036\001\002\000\012\012\uffa6\013\uffa6" +
    "\017\uffa6\035\uffa6\001\002\000\012\012\041\013\046\017" +
    "\014\035\036\001\002\000\012\012\uffa8\013\uffa8\017\uffa8" +
    "\035\uffa8\001\002\000\016\004\055\005\061\006\051\007" +
    "\053\027\060\040\064\001\002\000\014\004\055\005\061" +
    "\006\051\007\053\041\075\001\002\000\014\004\055\005" +
    "\061\006\051\007\053\041\071\001\002\000\054\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\027\uffc6\030" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\001\002\000\010\012\041\013\046\017\014\001\002" +
    "\000\050\004\uffb5\005\uffb5\006\uffb5\007\uffb5\027\060\030" +
    "\uffb5\036\uffb5\037\uffb5\040\064\041\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\001\002\000\044\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\030\uffb6\036\uffb6\037\uffb6\041\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\001\002\000\054\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\027\uffc7\030\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\010\012\041" +
    "\013\046\017\014\001\002\000\050\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\027\060\030\uffb8\036\uffb8\037\uffb8\040\064" +
    "\041\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\044\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\030\uffba\036\uffba\037\uffba\041" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\001\002\000\040\004\055\005" +
    "\061\006\051\007\053\027\060\030\uffa4\036\uffa4\037\uffa4" +
    "\040\064\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\001\002\000\010\030\uffa2\036\uffa2\037\uffa2\001\002" +
    "\000\042\004\055\005\061\006\051\007\053\030\uffaa\036" +
    "\uffaa\037\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\054\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\027\ufff6" +
    "\030\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\001\002\000\050\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\027\060\030\uffb7\036\uffb7\037\uffb7\040\064\041\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\001\002\000\044\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\030\uffb9\036\uffb9\037\uffb9\041\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\001\002\000\016\010\uff9b\027\060\030" +
    "\uff9b\036\uff9b\037\uff9b\040\064\001\002\000\012\010\uff9d" +
    "\030\uff9d\036\uff9d\037\uff9d\001\002\000\016\010\ufff7\027" +
    "\ufff7\030\ufff7\036\ufff7\037\ufff7\040\ufff7\001\002\000\006" +
    "\017\111\040\033\001\002\000\016\010\uff9c\027\060\030" +
    "\uff9c\036\uff9c\037\uff9c\040\064\001\002\000\012\010\uff9e" +
    "\030\uff9e\036\uff9e\037\uff9e\001\002\000\012\012\uffad\013" +
    "\uffad\017\uffad\035\uffad\001\002\000\012\012\041\013\046" +
    "\017\014\035\036\001\002\000\012\012\uffb2\013\uffb2\017" +
    "\uffb2\035\uffb2\001\002\000\012\012\uffaf\013\uffaf\017\uffaf" +
    "\035\uffaf\001\002\000\012\012\uffae\013\uffae\017\uffae\035" +
    "\uffae\001\002\000\012\012\uffb0\013\uffb0\017\uffb0\035\uffb0" +
    "\001\002\000\012\012\uffb1\013\uffb1\017\uffb1\035\uffb1\001" +
    "\002\000\032\004\055\005\061\006\051\007\053\027\060" +
    "\030\uffac\036\uffac\037\uffac\040\064\054\uffac\055\uffac\056" +
    "\uffac\001\002\000\016\030\uffb3\036\uffb3\037\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\001\002\000\020\002\uff84\017\uff84\034" +
    "\uff84\045\uff84\047\uff84\050\uff84\051\uff84\001\002\000\012" +
    "\004\055\005\061\006\051\007\053\001\002\000\014\004" +
    "\055\005\061\006\051\007\053\036\131\001\002\000\044" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\030\uffb4\036\uffb4\037" +
    "\uffb4\041\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\001\002\000\006\030" +
    "\173\041\uffe5\001\002\000\004\041\172\001\002\000\004" +
    "\041\171\001\002\000\006\030\167\041\uffeb\001\002\000" +
    "\004\041\166\001\002\000\004\041\165\001\002\000\042" +
    "\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\030\ufff0\032\ufff0\036\ufff0\037\ufff0\040\ufff0\045\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\001\002\000\006\030\162\041" +
    "\uffe7\001\002\000\006\030\157\041\uffe1\001\002\000\004" +
    "\041\156\001\002\000\006\030\153\041\uffed\001\002\000" +
    "\004\041\152\001\002\000\012\012\147\013\132\014\135" +
    "\040\146\001\002\000\006\030\150\041\uffdf\001\002\000" +
    "\004\012\147\001\002\000\004\041\uffde\001\002\000\044" +
    "\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\030\uffe2\032\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\045\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000\004\040" +
    "\154\001\002\000\006\014\135\040\154\001\002\000\004" +
    "\041\uffec\001\002\000\044\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\030\uffee\032\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\045\uffee\047\uffee\050\uffee\051" +
    "\uffee\001\002\000\004\040\161\001\002\000\004\041\uffe0" +
    "\001\002\000\006\012\147\040\161\001\002\000\004\040" +
    "\163\001\002\000\006\013\132\040\163\001\002\000\004" +
    "\041\uffe6\001\002\000\044\010\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\030\uffe8\032\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\045\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\001\002\000\044\010\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\030\uffef\032\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\045\uffef\047\uffef\050\uffef\051\uffef" +
    "\001\002\000\004\014\135\001\002\000\004\041\uffea\001" +
    "\002\000\044\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\030\uffe3\032\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002" +
    "\000\044\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\030\uffe9\032\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000" +
    "\004\013\132\001\002\000\004\041\uffe4\001\002\000\012" +
    "\012\041\013\046\017\014\035\036\001\002\000\040\004" +
    "\055\005\061\006\051\007\053\027\060\030\uffa3\036\uffa3" +
    "\037\uffa3\040\064\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\001\002\000\010\030\uffa5\036\uffa5\037\uffa5" +
    "\001\002\000\006\017\111\040\033\001\002\000\016\010" +
    "\uff9a\027\060\030\uff9a\036\uff9a\037\uff9a\040\064\001\002" +
    "\000\012\010\uff99\030\uff99\036\uff99\037\uff99\001\002\000" +
    "\004\002\001\001\002\000\020\002\uff7c\017\uff7c\034\uff7c" +
    "\045\uff7c\047\uff7c\050\uff7c\051\uff7c\001\002\000\020\002" +
    "\uff81\017\uff81\034\uff81\045\uff81\047\uff81\050\uff81\051\uff81" +
    "\001\002\000\014\012\041\013\046\017\014\035\036\040" +
    "\033\001\002\000\004\036\214\001\002\000\006\030\212" +
    "\036\uff90\001\002\000\042\004\055\005\061\006\051\007" +
    "\053\010\056\027\060\040\064\054\065\055\052\056\063" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001" +
    "\002\000\014\012\041\013\046\017\014\035\036\040\033" +
    "\001\002\000\004\036\uff8f\001\002\000\044\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\030\uff8e\036\uff8e\037\uff8e\041\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\001\002\000\012\012\041\013\046" +
    "\017\014\035\036\001\002\000\040\004\055\005\061\006" +
    "\051\007\053\027\060\040\064\054\065\055\052\056\063" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001" +
    "\002\000\004\036\220\001\002\000\004\033\221\001\002" +
    "\000\004\017\223\001\002\000\004\034\324\001\002\000" +
    "\004\031\230\001\002\000\014\017\014\045\013\047\004" +
    "\050\005\051\022\001\002\000\014\017\uff72\045\uff72\047" +
    "\uff72\050\uff72\051\uff72\001\002\000\014\017\uff71\045\uff71" +
    "\047\uff71\050\uff71\051\uff71\001\002\000\016\017\014\034" +
    "\uff93\045\013\047\004\050\005\051\022\001\002\000\022" +
    "\017\237\020\241\021\231\022\236\023\234\024\235\025" +
    "\233\026\232\001\002\000\016\011\322\017\ufffd\045\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\001\002\000\016\011\320\017" +
    "\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000\016" +
    "\011\316\017\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\016\011\314\017\ufffc\045\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\001\002\000\016\011\312\017\ufff9\045\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\001\002\000\016\011\310\017\ufffa" +
    "\045\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000\004\011" +
    "\244\001\002\000\014\017\uff70\045\uff70\047\uff70\050\uff70" +
    "\051\uff70\001\002\000\016\011\242\017\ufffe\045\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\001\002\000\004\012\243\001\002" +
    "\000\014\017\uff68\045\uff68\047\uff68\050\uff68\051\uff68\001" +
    "\002\000\016\012\256\013\245\014\250\015\257\016\247" +
    "\040\254\001\002\000\030\012\uff64\013\uff64\014\uff64\015" +
    "\uff64\016\uff64\017\uff64\040\uff64\045\uff64\047\uff64\050\uff64" +
    "\051\uff64\001\002\000\034\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\030\uffce\032\uffce\040\uffce\045\uffce" +
    "\047\uffce\050\uffce\051\uffce\001\002\000\030\012\uff65\013" +
    "\uff65\014\uff65\015\uff65\016\uff65\017\uff65\040\uff65\045\uff65" +
    "\047\uff65\050\uff65\051\uff65\001\002\000\030\012\uff61\013" +
    "\uff61\014\uff61\015\uff61\016\uff61\017\uff61\040\uff61\045\uff61" +
    "\047\uff61\050\uff61\051\uff61\001\002\000\030\012\uff60\013" +
    "\uff60\014\uff60\015\uff60\016\uff60\017\uff60\040\uff60\045\uff60" +
    "\047\uff60\050\uff60\051\uff60\001\002\000\030\012\uff5f\013" +
    "\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\040\uff5f\045\uff5f" +
    "\047\uff5f\050\uff5f\051\uff5f\001\002\000\030\012\uff67\013" +
    "\uff67\014\uff67\015\uff67\016\uff67\017\uff67\040\uff67\045\uff67" +
    "\047\uff67\050\uff67\051\uff67\001\002\000\016\012\147\013" +
    "\132\014\135\032\261\040\146\041\140\001\002\000\030" +
    "\012\256\013\245\014\250\015\257\016\247\017\uff6c\040" +
    "\254\045\uff6c\047\uff6c\050\uff6c\051\uff6c\001\002\000\030" +
    "\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63\040" +
    "\uff63\045\uff63\047\uff63\050\uff63\051\uff63\001\002\000\030" +
    "\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62\017\uff62\040" +
    "\uff62\045\uff62\047\uff62\050\uff62\051\uff62\001\002\000\030" +
    "\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\040" +
    "\uff66\045\uff66\047\uff66\050\uff66\051\uff66\001\002\000\020" +
    "\012\273\013\262\014\264\015\272\016\263\032\271\040" +
    "\254\001\002\000\006\030\uffd7\032\uffd7\001\002\000\010" +
    "\030\uffd3\032\uffd3\037\uffd3\001\002\000\010\030\uffd5\032" +
    "\uffd5\037\uffd5\001\002\000\006\030\uffd2\032\uffd2\001\002" +
    "\000\006\030\304\032\305\001\002\000\006\030\uffd1\032" +
    "\uffd1\001\002\000\010\030\275\032\uffcb\040\uffcb\001\002" +
    "\000\004\041\274\001\002\000\010\030\uffd4\032\uffd4\037" +
    "\uffd4\001\002\000\006\030\uffd6\032\uffd6\001\002\000\034" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\030" +
    "\uffcf\032\uffcf\040\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\001\002\000\006\032\uffca\040\uffca\001\002\000\006\032" +
    "\uffc9\040\300\001\002\000\004\032\uffc8\001\002\000\004" +
    "\032\261\001\002\000\004\032\302\001\002\000\004\041" +
    "\303\001\002\000\034\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\030\uffcc\032\uffcc\040\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\001\002\000\016\012\273\013\262" +
    "\014\264\015\272\016\263\040\033\001\002\000\004\041" +
    "\306\001\002\000\034\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\030\uffcd\032\uffcd\040\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\001\002\000\006\030\uffd0\032\uffd0" +
    "\001\002\000\004\014\311\001\002\000\014\017\uff6d\045" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\001\002\000\004\040\033" +
    "\001\002\000\014\017\uff6a\045\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\001\002\000\004\015\315\001\002\000\014\017\uff6b" +
    "\045\uff6b\047\uff6b\050\uff6b\051\uff6b\001\002\000\004\040" +
    "\300\001\002\000\014\017\uff6f\045\uff6f\047\uff6f\050\uff6f" +
    "\051\uff6f\001\002\000\004\016\321\001\002\000\014\017" +
    "\uff69\045\uff69\047\uff69\050\uff69\051\uff69\001\002\000\004" +
    "\013\323\001\002\000\014\017\uff6e\045\uff6e\047\uff6e\050" +
    "\uff6e\051\uff6e\001\002\000\022\002\uff88\017\uff88\034\uff88" +
    "\045\uff88\046\325\047\uff88\050\uff88\051\uff88\001\002\000" +
    "\004\033\330\001\002\000\020\002\uff8a\017\uff8a\034\uff8a" +
    "\045\uff8a\047\uff8a\050\uff8a\051\uff8a\001\002\000\020\002" +
    "\uff87\017\uff87\034\uff87\045\uff87\047\uff87\050\uff87\051\uff87" +
    "\001\002\000\004\017\223\001\002\000\004\034\332\001" +
    "\002\000\020\002\uff89\017\uff89\034\uff89\045\uff89\047\uff89" +
    "\050\uff89\051\uff89\001\002\000\022\012\336\013\337\014" +
    "\264\015\272\016\263\017\014\035\036\040\033\001\002" +
    "\000\004\037\344\001\002\000\004\037\343\001\002\000" +
    "\030\004\uffbb\005\uffbb\006\uffbb\007\uffbb\037\uffd6\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000" +
    "\030\004\uffbc\005\uffbc\006\uffbc\007\uffbc\037\uffd7\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000" +
    "\006\010\uff9f\037\uffd2\001\002\000\044\004\055\005\061" +
    "\006\051\007\053\010\056\027\060\037\342\040\064\054" +
    "\065\055\052\056\063\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\001\002\000\020\002\uff8d\017\uff8d\034" +
    "\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\001\002\000\020" +
    "\002\uff8c\017\uff8c\034\uff8c\045\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\001\002\000\020\002\uff8b\017\uff8b\034\uff8b\045\uff8b" +
    "\047\uff8b\050\uff8b\051\uff8b\001\002\000\004\017\223\001" +
    "\002\000\004\034\347\001\002\000\004\052\350\001\002" +
    "\000\004\035\351\001\002\000\012\012\041\013\046\017" +
    "\014\035\036\001\002\000\004\036\353\001\002\000\020" +
    "\002\uff85\017\uff85\034\uff85\045\uff85\047\uff85\050\uff85\051" +
    "\uff85\001\002\000\012\012\041\013\046\017\014\035\036" +
    "\001\002\000\004\036\356\001\002\000\004\053\357\001" +
    "\002\000\004\033\360\001\002\000\004\017\223\001\002" +
    "\000\004\034\362\001\002\000\020\002\uff86\017\uff86\034" +
    "\uff86\045\uff86\047\uff86\050\uff86\051\uff86\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\032\002\005\003\011\004\010\040\016\060" +
    "\006\061\022\064\020\065\007\066\023\074\015\077\014" +
    "\100\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\005\003\011\004\010\040\016\060\006\061" +
    "\022\064\020\065\007\066\023\074\015\077\203\001\001" +
    "\000\002\001\001\000\050\002\047\003\011\004\010\012" +
    "\046\013\044\022\031\023\033\024\026\040\016\044\043" +
    "\045\034\046\037\047\030\050\041\052\025\055\024\056" +
    "\027\057\042\074\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\174\001\001\000\002" +
    "\001\001\000\024\014\142\015\136\016\144\022\143\023" +
    "\141\024\140\027\132\030\133\031\135\001\001\000\002" +
    "\001\001\000\004\043\075\001\001\000\020\002\065\003" +
    "\011\004\010\040\016\044\127\045\126\074\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\115\001\001\000\002\001\001\000\004\043\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\056\054\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\106\003\011\004\010\012\046" +
    "\013\044\022\031\023\033\024\026\040\016\057\107\001" +
    "\001\000\016\002\104\003\011\004\010\040\016\045\105" +
    "\074\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\100\003\011\004\010\040\016\044\102\045\034" +
    "\047\101\050\041\074\036\001\001\000\002\001\001\000" +
    "\020\002\065\003\011\004\010\040\016\044\067\045\066" +
    "\074\036\001\001\000\002\001\001\000\004\043\056\001" +
    "\001\000\004\043\075\001\001\000\004\043\071\001\001" +
    "\000\002\001\001\000\016\002\072\003\011\004\010\040" +
    "\016\045\073\074\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\076\003\011\004" +
    "\010\040\016\045\077\074\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\056\001\001\000\002\001" +
    "\001\000\004\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\112\003\011\004\010" +
    "\012\046\013\044\022\031\023\033\024\026\040\016\057" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\123\003\011\004\010\040\016\044" +
    "\102\045\034\050\124\074\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\075\001\001\000\004\043" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\142\015\136\016\144\022\143" +
    "\023\141\024\140\027\132\030\133\031\135\001\001\000" +
    "\002\001\001\000\004\030\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\154\022\143\001\001\000" +
    "\010\014\142\022\143\031\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\157\023\141\001\001\000" +
    "\002\001\001\000\010\016\144\023\141\030\133\001\001" +
    "\000\006\015\163\024\140\001\001\000\010\015\136\024" +
    "\140\027\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\173" +
    "\001\001\000\002\001\001\000\024\002\175\003\011\004" +
    "\010\040\016\044\102\045\034\047\176\050\041\074\036" +
    "\001\001\000\004\043\056\001\001\000\002\001\001\000" +
    "\026\002\200\003\011\004\010\012\046\013\044\022\031" +
    "\023\033\024\026\040\016\057\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\002\210\003\011\004\010\012" +
    "\046\013\044\022\031\023\033\024\026\040\016\044\043" +
    "\045\034\046\207\047\030\050\041\052\025\055\024\056" +
    "\027\057\042\073\206\074\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\056\054\061\001\001\000" +
    "\052\002\210\003\011\004\010\012\046\013\044\022\031" +
    "\023\033\024\026\040\016\044\043\045\034\046\207\047" +
    "\030\050\041\052\025\055\024\056\027\057\042\073\212" +
    "\074\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\215\003\011\004\010\040\016\044\102\045\034" +
    "\047\030\050\041\052\216\055\024\074\036\001\001\000" +
    "\006\043\056\054\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\075\221\076\223\102\224\103\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\005" +
    "\003\011\004\010\040\016\060\006\061\022\064\020\065" +
    "\007\066\023\074\015\077\014\100\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\005\003\011\004" +
    "\010\040\016\060\006\061\022\064\020\065\007\066\023" +
    "\074\015\077\203\001\001\000\004\005\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\250\013\044\020\254\021" +
    "\252\022\031\023\033\024\026\034\251\037\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\142\015\136\016\144\022\143\023" +
    "\141\024\140\027\132\030\133\031\135\001\001\000\022" +
    "\012\250\013\044\021\257\022\031\023\033\024\026\034" +
    "\251\037\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\264\013\044\022\031\023" +
    "\033\024\026\032\265\033\266\034\267\037\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\276\035\300\037\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\264\013\044\022\031\023\033\024" +
    "\026\033\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\312\013\044\022\031\023\033\024\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\316\037\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\326\063\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\075\330\076" +
    "\223\102\224\103\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\340\003\011\004\010\012\337\013" +
    "\044\022\031\023\033\024\026\033\333\040\016\044\043" +
    "\045\034\046\334\047\030\050\041\052\025\055\024\056" +
    "\027\057\042\074\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\056\054\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\075\345\076" +
    "\223\102\224\103\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\215\003\011\004" +
    "\010\040\016\044\102\045\034\047\030\050\041\052\351" +
    "\055\024\074\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\215\003\011\004\010\040\016\044\102" +
    "\045\034\047\030\050\041\052\354\055\024\074\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\075\360\076\223\102\224\103\225\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // value ::= tuple 
            {
              Object RESULT =null;
		 System.out.println("value ::= tuple"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // value ::= list 
            {
              Object RESULT =null;
		 System.out.println("value ::= list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // value ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("value ::= STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // value ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("value ::= CHAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // value ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("value ::= FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("value ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // value ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("value ::= BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // valuelist ::= valuelist value 
            {
              Object RESULT =null;
		 System.out.println("valuelist ::= valuelist value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // valuelist ::= value 
            {
              Object RESULT =null;
		 System.out.println("valuelist ::= value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // var_declr_init ::= ID COLON FLOATTYPE ASSIGN FLOAT 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON FLOATTYPE ASSIGN FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // var_declr_init ::= ID COLON BOOLTYPE ASSIGN BOOL 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON BOOLTYPE ASSIGN BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // var_declr_init ::= ID COLON LISTTYPE ASSIGN list 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON LISTTYPE ASSIGN list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // var_declr_init ::= ID COLON CHARTYPE ASSIGN CHAR 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON CHARTYPE ASSIGN CHAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // var_declr_init ::= ID COLON ID ASSIGN valuelist 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON ID ASSIGN valuelist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // var_declr_init ::= ID COLON STRINGTYPE ASSIGN STRING 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON STRINGTYPE ASSIGN STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // var_declr_init ::= ID COLON INTEGERTYPE ASSIGN INTEGER 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON INTEGERTYPE ASSIGN INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // var_declr_init ::= ID COLON TUPLETYPE ASSIGN tuple 
            {
              Object RESULT =null;
		 System.out.println("var_decl_init ::= ID COLON TUPLETYPE ASSIGN tuple"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // var_single_declr ::= ID COLON type 
            {
              Object RESULT =null;
		 System.out.println("var_single_decl ::= ID COLON type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_single_declr",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // var_declr ::= var_declr_init 
            {
              Object RESULT =null;
		 System.out.println("var_decl ::= var_decl_init"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // var_declr ::= var_single_declr 
            {
              Object RESULT =null;
		 System.out.println("var_decl ::= var_single_declr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // vardeclist ::= vardeclist var_declr SEMI 
            {
              Object RESULT =null;
		 System.out.println("vardeclist ::= vardeclist var_declr SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // vardeclist ::= var_declr SEMI 
            {
              Object RESULT =null;
		 System.out.println("vardeclist ::= var_declr SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // element ::= ID COLON type 
            {
              Object RESULT =null;
		 System.out.println("element ::= ID COLON type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // elementlist ::= elementlist COMMA element 
            {
              Object RESULT =null;
		 System.out.println("elementlist ::= elementlist COMMA element"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // elementlist ::= element 
            {
              Object RESULT =null;
		 System.out.println("elementlist ::= element"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // typedecl ::= TDEF ID COLON elementlist SEMI 
            {
              Object RESULT =null;
		 System.out.println("typedecl ::= TDEF ID COLON elementlist SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // typedeclist ::= typedeclist typedecl 
            {
              Object RESULT =null;
		 System.out.println("typedeclist ::= typedeclist typedecl"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedeclist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // typedeclist ::= typedecl 
            {
              Object RESULT =null;
		 System.out.println("typedeclist ::= typedecl"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedeclist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statement_list ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_list ::= statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		 System.out.println("statement_list ::= statement_list statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // statement ::= return_statement 
            {
              Object RESULT =null;
		 System.out.println("statement ::= return_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // statement ::= repeat_statement 
            {
              Object RESULT =null;
		 System.out.println("statement ::= repeat_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // statement ::= while_statement 
            {
              Object RESULT =null;
		 System.out.println("statement ::= while_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // statement ::= if_statement 
            {
              Object RESULT =null;
		 System.out.println("statement ::= if_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // statement ::= func_call SEMI 
            {
              Object RESULT =null;
		 System.out.println("statement ::= func_call"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // statement ::= assignment 
            {
              Object RESULT =null;
		 System.out.println("statement ::= assingment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // return_statement ::= RETURN name SEMI 
            {
              Object RESULT =null;
		 System.out.println("return_statement ::= RETURN name SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // return_statement ::= RETURN expression SEMI 
            {
              Object RESULT =null;
		 System.out.println("return_statement ::= RETURN expression SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // repeat_statement ::= REPEAT LCBRACK body RCBRACK UNTIL LPAREN bool_exp RPAREN 
            {
              Object RESULT =null;
		 System.out.println("repeat_statement ::= ..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // while_statement ::= WHILE LPAREN bool_exp RPAREN DO LCBRACK body RCBRACK 
            {
              Object RESULT =null;
		 System.out.println("while_statement ::= ..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // else_opt ::= else_statement 
            {
              Object RESULT =null;
		 System.out.println("else_opt ::= else_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // else_opt ::= 
            {
              Object RESULT =null;
		 System.out.println("else_opt ::= "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // else_statement ::= ELSE LCBRACK body RCBRACK 
            {
              Object RESULT =null;
		 System.out.println("else_statement ::= ELSE LCBRACK body RCBRACK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // if_statement ::= IF LPAREN bool_exp RPAREN LCBRACK body RCBRACK else_opt 
            {
              Object RESULT =null;
		 System.out.println("if_statement ::= IF LPAREN bool_exp RPAREN LCBRACK..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignment ::= name ASSIGN anyElement SEMI 
            {
              Object RESULT =null;
		 System.out.println("assignment ::= name ASSIGN anyElement SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignment ::= name ASSIGN expression SEMI 
            {
              Object RESULT =null;
		 System.out.println("assignment ::= name ASSIGN expression SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignment ::= name ASSIGN name SEMI 
            {
              Object RESULT =null;
		 System.out.println("assignment ::= name ASSIGN name SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // func_call ::= ID LPAREN actual_param_list RPAREN 
            {
              Object RESULT =null;
		 System.out.println("func_call ::= ID LPAREN actual_param_list RPAREN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // actual_param_list ::= expression COMMA actual_param_list 
            {
              Object RESULT =null;
		 System.out.println("actual_param_list ::= expression COMMA actual_param_list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // actual_param_list ::= expression 
            {
              Object RESULT =null;
		 System.out.println("actual_param_list ::= expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // param_list ::= name COLON type COMMA param_list 
            {
              Object RESULT =null;
		 System.out.println("param_list ::= name COLON type COMMA param_list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // param_list ::= name COLON type 
            {
              Object RESULT =null;
		 System.out.println("param_list ::= name COLON type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // body ::= var_declr statement_list 
            {
              Object RESULT =null;
		 System.out.println("body ::= var_declr statement_list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // func_def_noretrn ::= FDEF ID LPAREN param_list RPAREN COLON VOID LCBRACK func_body RCBRACK 
            {
              Object RESULT =null;
		 System.out.println("func_def_noreturn ::= FDEF ID LPAREN..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def_noretrn",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // func_def_retrn ::= FDEF ID LPAREN param_list RPAREN COLON type LCBRACK func_body return_statement RCBRACK 
            {
              Object RESULT =null;
		 System.out.println("func_def_return ::= FDEF ID LPAREN..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def_retrn",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= concat_expr 
            {
              Object RESULT =null;
		 System.out.println("expression ::= concat_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= bool_exp 
            {
              Object RESULT =null;
		 System.out.println("expression ::= bool_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= ar_expression 
            {
              Object RESULT =null;
		 System.out.println("expression ::= ar_expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concat_expr ::= concat_expr CONCAT concat_operand 
            {
              Object RESULT =null;
		 System.out.println("concat_expr ::= concat_expr CONCAT concat_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concat_expr ::= concat_expr CONCAT name 
            {
              Object RESULT =null;
		 System.out.println("concat_expr ::= concat_expr CONCAT name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // concat_expr ::= name CONCAT name 
            {
              Object RESULT =null;
		 System.out.println("concat_expr ::= name CONCAT name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // concat_expr ::= concat_operand CONCAT name 
            {
              Object RESULT =null;
		 System.out.println("concat_expr ::= concat_operand CONCAT name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // concat_expr ::= name CONCAT concat_operand 
            {
              Object RESULT =null;
		 System.out.println("concat_expr ::= concat_operand CONCAT concat_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // concat_expr ::= concat_operand CONCAT concat_operand 
            {
              Object RESULT =null;
		 System.out.println("concat_expr ::= concat_operand CONCAT concat_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // concat_operand ::= list 
            {
              Object RESULT =null;
		 System.out.println("concat_operand ::= list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_operand",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_exp ::= logic_expr 
            {
              Object RESULT =null;
		 System.out.println("bool_exp ::= logic_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_exp ::= comparison_exp 
            {
              Object RESULT =null;
		 System.out.println("bool_exp ::= comparison_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // logic_expr ::= name logic_operation comparison_exp 
            {
              Object RESULT =null;
		 System.out.println("logic_expr ::= name logic_operation comparison_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // logic_expr ::= comparison_exp logic_operation name 
            {
              Object RESULT =null;
		 System.out.println("logic_expr ::= comparison_exp logic_operation name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // logic_expr ::= name logic_operation name 
            {
              Object RESULT =null;
		 System.out.println("logic_expr ::= name logic_operation name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // logic_expr ::= comparison_exp logic_operation comparison_exp 
            {
              Object RESULT =null;
		 System.out.println("logic_expr ::= comparison_exp logic_operation comparison_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // logic_operation ::= NOT 
            {
              Object RESULT =null;
		 System.out.println("logic_operation ::= NOT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logic_operation ::= AND 
            {
              Object RESULT =null;
		 System.out.println("logic_operation ::= AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logic_operation ::= OR 
            {
              Object RESULT =null;
		 System.out.println("logic_operation ::= OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bool_operand ::= comparison_exp 
            {
              Object RESULT =null;
		 System.out.println("bool_operand ::= comparison_exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operand",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comp_operand ::= ar_expression 
            {
              Object RESULT =null;
		 System.out.println("comp_operand ::= ar_expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_operand",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comp_operand ::= ar_operand 
            {
              Object RESULT =null;
		 System.out.println("comp_operand ::= ar_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_operand",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comp_operand ::= name 
            {
              Object RESULT =null;
		 System.out.println("comp_operand ::= name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_operand",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparison_op ::= GREATEREQ 
            {
              Object RESULT =null;
		 System.out.println("comparison_op ::= GREATEREQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparison_op ::= GREATER 
            {
              Object RESULT =null;
		 System.out.println("comparison_op ::= GREATER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparison_op ::= LESSEQ 
            {
              Object RESULT =null;
		 System.out.println("comparison_op ::= LESSEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparison_op ::= LESS 
            {
              Object RESULT =null;
		 System.out.println("comparison_op ::= LESS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparison_op ::= NEQ 
            {
              Object RESULT =null;
		 System.out.println("comparison_op ::= NEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparison_op ::= EQ 
            {
              Object RESULT =null;
		 System.out.println("comparison_op ::= EQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparison_exp ::= comp_operand comparison_op comp_operand 
            {
              Object RESULT =null;
		 System.out.println("comparison_exp ::= comp_operand comparison_op comp_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ar_expression ::= LPAREN ar_expression RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression LPAREN ar_expression LPAREN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ar_expression ::= ar_expression ar_operation name 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression ar_expression ar_operation name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ar_expression ::= ar_expression ar_operation ar_operand 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression ar_expression ar_operation ar_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ar_expression ::= name ar_operation name 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression ar_operand ar_operation ar_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ar_expression ::= ar_operand ar_operation name 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression ar_operand ar_operation name"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ar_expression ::= name ar_operation ar_operand 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression name ar_operation ar_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ar_expression ::= ar_operand ar_operation ar_operand 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic expression ar_operand ar_operation ar_operand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ar_operand ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("ar_operand ::= FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ar_operand ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("ar_operand ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ar_operand ::= func_call 
            {
              Object RESULT =null;
		 System.out.println("ar_operand ::= func_call"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ar_operation ::= TIMES 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic operation *"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ar_operation ::= DIVIDE 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic operation /"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ar_operation ::= MINUS 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic operation -"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ar_operation ::= PLUS 
            {
              Object RESULT =null;
		 System.out.println("Ariphmentic operation +"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sequence_slicing ::= name LBRACK ar_expression COLON RBRACK 
            {
              Object RESULT =null;
		System.out.println("sequence_slicing ::= name LBRACK ar_expression COLON RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_slicing",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sequence_slicing ::= name LBRACK COLON ar_expression RBRACK 
            {
              Object RESULT =null;
		System.out.println("sequence_slicing ::= name LBRACK COLON ar_expression RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_slicing",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sequence_slicing ::= name LBRACK ar_expression COLON ar_expression RBRACK 
            {
              Object RESULT =null;
		System.out.println("sequence_slicing ::= name LBRACK ar_expression COLON ar_expression RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_slicing",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sequence_len ::= LEN LPAREN name RPAREN 
            {
              Object RESULT =null;
		System.out.println("sequence_len ::= LEN LPAREN name RPAREN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_len",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list_index ::= name LBRACK ar_expression RBRACK 
            {
              Object RESULT =null;
		System.out.println("list_index ::= name LBRACK ar_expression RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_index",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list_index ::= name LBRACK ar_operand RBRACK 
            {
              Object RESULT =null;
		System.out.println("list_index ::= name LBRACK ar_operand RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_index",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tuple_op ::= tuple 
            {
              Object RESULT =null;
		System.out.println("tuple_op ::= tuple");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tuple_op ::= 
            {
              Object RESULT =null;
		System.out.println("tuple_op ::= emptyString");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comma_op ::= COMMA 
            {
              Object RESULT =null;
		System.out.println("comma_op ::= COMMA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comma_op ::= 
            {
              Object RESULT =null;
		System.out.println("comma_op ::= emptyString");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tuple ::= LBRACK STROKE tuple comma_op tuple_op STROKE RBRACK 
            {
              Object RESULT =null;
		System.out.println("tuple ::= LBRACK STROKE listOfAnyElements STROKE RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tuple ::= LBRACK STROKE listOfAnyElements STROKE RBRACK 
            {
              Object RESULT =null;
		System.out.println("tuple ::= LBRACK STROKE listOfAnyElements STROKE RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tuple ::= emptyTuple 
            {
              Object RESULT =null;
		System.out.println("tuple ::= emptyTuple");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // emptyTuple ::= LBRACK STROKE STROKE RBRACK 
            {
              Object RESULT =null;
		System.out.println("emptyTuple ::= LBRACK STROKE STROKE RBRACK ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyTuple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listOfAnyElements ::= listOfAnyElements COMMA anyElement 
            {
              Object RESULT =null;
		System.out.println("listOfAnyElements ::= listOfAnyElements COMMA anyElement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfAnyElements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listOfAnyElements ::= anyElement 
            {
              Object RESULT =null;
		System.out.println("listOfAnyElements ::= anyElement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfAnyElements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // anyElement ::= list 
            {
              Object RESULT =null;
		System.out.println("anyElement ::= list");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // anyElement ::= BOOL 
            {
              Object RESULT =null;
		System.out.println("anyElement ::= BOOL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // anyElement ::= CHAR 
            {
              Object RESULT =null;
		System.out.println("anyElement ::= CHAR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // anyElement ::= STRING 
            {
              Object RESULT =null;
		System.out.println("anyElement ::= STRING");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // anyElement ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("anyElement ::= FLOAT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // anyElement ::= INTEGER 
            {
              Object RESULT =null;
		System.out.println("anyElement ::= INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listOfChars ::= CHAR COMMA listOfChars 
            {
              Object RESULT =null;
		System.out.println("listOfChars ::= CHAR COMMA listOfChars");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfChars",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listOfChars ::= CHAR 
            {
              Object RESULT =null;
		System.out.println("listOfChars ::= CHAR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfChars",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listOfListsOfChars ::= charList COMMA listOfListsOfChars 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfChars ::= charList COMMA listOfListsOfChars");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfChars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listOfListsOfChars ::= charList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfChars ::= charList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfChars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // charList ::= LBRACK listOfListsOfChars RBRACK 
            {
              Object RESULT =null;
		System.out.println("charList ::= LBRACK listOfListsOfChars RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // charList ::= LBRACK listOfChars RBRACK 
            {
              Object RESULT =null;
		System.out.println("charList ::= LBRACK listOfChars RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listOfFloats ::= FLOAT COMMA listOfFloats 
            {
              Object RESULT =null;
		System.out.println("listOfFloats ::= FLOAT COMMA listOfFloats");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfFloats",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listOfFloats ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("listOfFloats ::= FLOAT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfFloats",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listOfListsOfFloats ::= floatList COMMA listOfListsOfFloats 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfFloats ::= floatList COMMA listOfListsOfFloats");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfFloats",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listOfListsOfFloats ::= floatList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfFloats ::= floatList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfFloats",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // floatList ::= LBRACK listOfListsOfFloats RBRACK 
            {
              Object RESULT =null;
		System.out.println("floatList ::= LBRACK listOfListsOfFloats RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // floatList ::= LBRACK listOfFloats RBRACK 
            {
              Object RESULT =null;
		System.out.println("floatList ::= LBRACK listOfFloats RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listOfIntegers ::= INTEGER COMMA listOfIntegers 
            {
              Object RESULT =null;
		System.out.println("listOfIntegers ::= INTEGER COMMA listOfIntegers");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfIntegers",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listOfIntegers ::= INTEGER 
            {
              Object RESULT =null;
		System.out.println("listOfIntegers ::= INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfIntegers",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listOfListsOfIntegers ::= integerList COMMA listOfListsOfIntegers 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfIntegers ::= integerList COMMA listOfListsOfIntegers ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfIntegers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listOfListsOfIntegers ::= integerList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfIntegers ::= integerList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfIntegers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // integerList ::= LBRACK listOfListsOfIntegers RBRACK 
            {
              Object RESULT =null;
		System.out.println("integerList ::= LBRACK listOfListsOfIntegers RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integerList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // integerList ::= LBRACK listOfIntegers RBRACK 
            {
              Object RESULT =null;
		System.out.println("integerList ::= LBRACK listOfIntegers RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integerList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listOfStrings ::= STRING COMMA listOfStrings 
            {
              Object RESULT =null;
		System.out.println("listOfStrings ::= STRING COMMA listOfStrings");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfStrings",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listOfStrings ::= STRING 
            {
              Object RESULT =null;
		System.out.println("listOfStrings ::= STRING");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfStrings",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listOfListsOfStrings ::= stringList COMMA listOfListsOfStrings 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfStrings ::= stringList COMMA listOfListsOfStrings");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfStrings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listOfListsOfStrings ::= stringList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfStrings ::= stringList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfStrings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stringList ::= LBRACK listOfListsOfStrings RBRACK 
            {
              Object RESULT =null;
		System.out.println("stringList ::= LBRACK listOfListsOfStrings RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stringList ::= LBRACK listOfStrings RBRACK 
            {
              Object RESULT =null;
		System.out.println("stringList ::= LBRACK listOfStrings RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // emptyList ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		System.out.println("emptyList ::= LBRACK RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list ::= floatList 
            {
              Object RESULT =null;
		System.out.println("list ::= floatList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list ::= integerList 
            {
              Object RESULT =null;
		System.out.println("list ::= integerList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list ::= stringList 
            {
              Object RESULT =null;
		System.out.println("list ::= stringList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // list ::= emptyList 
            {
              Object RESULT =null;
		System.out.println("list ::= emptyList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // qualified_name ::= list_index 
            {
              Object RESULT =null;
		System.out.println("qualified_name ::= list_index");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_name",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // qualified_name ::= name DOT ID 
            {
              Object RESULT =null;
		System.out.println("qualified_name ::= name DOT ID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_name",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_name ::= ID 
            {
              Object RESULT =null;
		System.out.println("simple_name ::= ID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TUPLETYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= TUPLETYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= LISTTYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= LISTTYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= STRINGTYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= STRINGTYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= BOOLTYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= BOOLTYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= CHARTYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= CHARTYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= INTEGERTYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= INTEGERTYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FLOATTYPE 
            {
              Object RESULT =null;
		System.out.println("type ::= FLOATTYPE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= qualified_name 
            {
              Object RESULT =null;
		System.out.println("name ::= qualified_name");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // name ::= simple_name 
            {
              Object RESULT =null;
		System.out.println("name ::= simple_name");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 12 12:02:59 GMT 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 12 12:02:59 GMT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\020\003\000\002\020\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\004\000" +
    "\002\023\005\000\002\023\005\000\002\014\003\000\002" +
    "\014\005\000\002\033\003\000\002\033\005\000\002\025" +
    "\005\000\002\025\005\000\002\015\003\000\002\015\005" +
    "\000\002\031\003\000\002\031\005\000\002\024\005\000" +
    "\002\024\005\000\002\016\003\000\002\016\005\000\002" +
    "\032\003\000\002\032\005\000\002\027\005\000\002\027" +
    "\005\000\002\021\003\000\002\021\005\000\002\034\003" +
    "\000\002\034\005\000\002\026\005\000\002\026\005\000" +
    "\002\017\003\000\002\017\005\000\002\030\003\000\002" +
    "\030\005\000\002\063\006\000\002\063\006\000\002\042" +
    "\006\000\002\037\003\000\002\037\007\000\002\041\002" +
    "\000\002\041\003\000\002\040\002\000\002\040\003\000" +
    "\002\102\003\000\002\103\003\000\002\103\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\017\004\001\002\000\010\011\ufffe\027" +
    "\ufffe\037\ufffe\001\002\000\006\002\145\017\004\001\002" +
    "\000\010\011\ufffc\027\ufffc\037\ufffc\001\002\000\006\011" +
    "\014\027\015\001\002\000\006\002\uffc3\017\uffc3\001\002" +
    "\000\010\011\uffff\027\uffff\037\uffff\001\002\000\006\002" +
    "\uffc4\017\uffc4\001\002\000\010\011\000\027\000\037\000" +
    "\001\002\000\020\012\026\013\034\014\025\015\021\016" +
    "\033\017\004\040\022\001\002\000\004\017\016\001\002" +
    "\000\010\011\ufffd\027\ufffd\037\ufffd\001\002\000\010\030" +
    "\ufff0\032\ufff0\037\ufff0\001\002\000\010\030\ufff1\032\ufff1" +
    "\037\ufff1\001\002\000\010\030\ufff8\032\ufff8\037\ufff8\001" +
    "\002\000\022\012\055\013\064\014\053\015\045\016\062" +
    "\032\065\040\047\041\042\001\002\000\010\030\uffef\032" +
    "\uffef\037\uffef\001\002\000\010\030\uffca\032\uffca\037\uffca" +
    "\001\002\000\010\030\ufff7\032\ufff7\037\ufff7\001\002\000" +
    "\010\030\ufff9\032\ufff9\037\ufff9\001\002\000\010\030\ufff5" +
    "\032\ufff5\037\ufff5\001\002\000\010\030\uffed\032\uffed\037" +
    "\uffed\001\002\000\004\037\041\001\002\000\010\030\ufff2" +
    "\032\ufff2\037\ufff2\001\002\000\010\030\ufffb\032\ufffb\037" +
    "\ufffb\001\002\000\010\030\ufffa\032\ufffa\037\ufffa\001\002" +
    "\000\010\030\ufff6\032\ufff6\037\ufff6\001\002\000\010\030" +
    "\uffee\032\uffee\037\uffee\001\002\000\006\027\015\037\040" +
    "\001\002\000\006\002\uffcd\017\uffcd\001\002\000\006\002" +
    "\uffcc\017\uffcc\001\002\000\010\030\uffec\032\uffec\037\uffec" +
    "\001\002\000\006\030\141\041\uffe3\001\002\000\006\030" +
    "\136\041\uffe9\001\002\000\006\030\134\041\uffcf\001\002" +
    "\000\004\041\133\001\002\000\016\012\055\013\064\014" +
    "\053\015\045\016\062\040\047\001\002\000\006\030\130" +
    "\041\uffdd\001\002\000\004\041\127\001\002\000\004\041" +
    "\126\001\002\000\006\030\124\041\uffe7\001\002\000\004" +
    "\041\123\001\002\000\006\030\121\041\uffdb\001\002\000" +
    "\004\041\120\001\002\000\006\030\115\041\uffd7\001\002" +
    "\000\004\041\114\001\002\000\004\041\113\001\002\000" +
    "\006\030\111\041\uffd5\001\002\000\004\041\110\001\002" +
    "\000\006\030\106\041\uffe1\001\002\000\020\012\026\013" +
    "\034\014\025\015\021\016\033\032\100\040\022\001\002" +
    "\000\004\041\075\001\002\000\004\041\074\001\002\000" +
    "\006\030\071\041\uffd1\001\002\000\004\040\073\001\002" +
    "\000\004\041\uffd0\001\002\000\006\015\045\040\073\001" +
    "\002\000\012\030\uffde\032\uffde\037\uffde\041\uffde\001\002" +
    "\000\012\030\uffeb\032\uffeb\037\uffeb\041\uffeb\001\002\000" +
    "\006\030\102\032\103\001\002\000\006\030\ufff4\032\ufff4" +
    "\001\002\000\004\041\101\001\002\000\010\030\uffcb\032" +
    "\uffcb\037\uffcb\001\002\000\016\012\026\013\034\014\025" +
    "\015\021\016\033\040\022\001\002\000\004\041\104\001" +
    "\002\000\010\030\uffc9\032\uffc9\037\uffc9\001\002\000\006" +
    "\030\ufff3\032\ufff3\001\002\000\004\013\064\001\002\000" +
    "\004\041\uffe0\001\002\000\012\030\uffea\032\uffea\037\uffea" +
    "\041\uffea\001\002\000\004\016\062\001\002\000\004\041" +
    "\uffd4\001\002\000\012\030\uffd9\032\uffd9\037\uffd9\041\uffd9" +
    "\001\002\000\012\030\uffd3\032\uffd3\037\uffd3\041\uffd3\001" +
    "\002\000\004\040\116\001\002\000\006\016\062\040\116" +
    "\001\002\000\004\041\uffd6\001\002\000\012\030\uffe5\032" +
    "\uffe5\037\uffe5\041\uffe5\001\002\000\004\012\055\001\002" +
    "\000\004\041\uffda\001\002\000\012\030\uffd8\032\uffd8\037" +
    "\uffd8\041\uffd8\001\002\000\004\014\053\001\002\000\004" +
    "\041\uffe6\001\002\000\012\030\uffe4\032\uffe4\037\uffe4\041" +
    "\uffe4\001\002\000\012\030\uffd2\032\uffd2\037\uffd2\041\uffd2" +
    "\001\002\000\004\040\132\001\002\000\004\041\uffdc\001" +
    "\002\000\006\012\055\040\132\001\002\000\012\030\uffdf" +
    "\032\uffdf\037\uffdf\041\uffdf\001\002\000\004\015\045\001" +
    "\002\000\004\041\uffce\001\002\000\004\040\137\001\002" +
    "\000\006\014\053\040\137\001\002\000\004\041\uffe8\001" +
    "\002\000\004\040\142\001\002\000\006\013\064\040\142" +
    "\001\002\000\004\041\uffe2\001\002\000\006\002\uffc2\017" +
    "\uffc2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\020\002\006\003\012\004\010\043\005\063" +
    "\011\102\007\103\004\001\001\000\002\001\001\000\016" +
    "\002\006\003\012\004\010\043\005\063\011\102\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\036\003\012\004\010\012\034\013\031\022\030" +
    "\023\017\024\022\025\016\026\035\027\027\037\026\042" +
    "\023\043\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\014\062\015\051\016\066\017\050\021\053\023\043" +
    "\024\047\025\042\026\067\027\056\030\057\031\055\032" +
    "\045\033\065\034\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\014\062" +
    "\015\051\016\066\017\050\021\053\023\043\024\047\025" +
    "\042\026\067\027\056\030\057\031\055\032\045\033\065" +
    "\034\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\034\013\031\020\075\022" +
    "\076\023\017\024\022\025\016\026\035\027\027\037\026" +
    "\042\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\071\026\067\001\001\000\002" +
    "\001\001\000\010\017\050\026\067\030\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\034\013\031\022\104\023\017\024\022\025\016\026\035" +
    "\027\027\037\026\042\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\116\027\056\001\001\000\010\021\053\027" +
    "\056\034\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\130\024\047\001" +
    "\001\000\002\001\001\000\010\016\066\024\047\032\045" +
    "\001\001\000\002\001\001\000\004\030\134\001\001\000" +
    "\002\001\001\000\006\014\137\023\043\001\001\000\010" +
    "\014\062\023\043\033\065\001\001\000\002\001\001\000" +
    "\006\015\142\025\042\001\001\000\010\015\051\025\042" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		 System.out.println("statement_list ::= statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement_list ::= statement 
            {
              Object RESULT =null;
		 System.out.println("statement_list ::= statement_list statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= assignment 
            {
              Object RESULT =null;
		 System.out.println("statement ::= assingment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tuple_op ::= tuple 
            {
              Object RESULT =null;
		System.out.println("tuple_op ::= tuple");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tuple_op ::= 
            {
              Object RESULT =null;
		System.out.println("tuple_op ::= emptyString");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comma_op ::= COMMA 
            {
              Object RESULT =null;
		System.out.println("comma_op ::= COMMA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comma_op ::= 
            {
              Object RESULT =null;
		System.out.println("comma_op ::= emptyString");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tuple ::= LBRACK STROKE valuelist STROKE RBRACK 
            {
              Object RESULT =null;
		System.out.println("tuple ::= LBRACK STROKE listOfAnyElements STROKE RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tuple ::= emptyTuple 
            {
              Object RESULT =null;
		System.out.println("tuple ::= emptyTuple");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // emptyTuple ::= LBRACK STROKE STROKE RBRACK 
            {
              Object RESULT =null;
		System.out.println("emptyTuple ::= LBRACK STROKE STROKE RBRACK ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyTuple",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment ::= name ASSIGN value SEMI 
            {
              Object RESULT =null;
		 System.out.println("assignment ::= name ASSIGN anyElement SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment ::= name ASSIGN name SEMI 
            {
              Object RESULT =null;
		 System.out.println("assignment ::= name ASSIGN name SEMI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listOfChars ::= CHAR COMMA listOfChars 
            {
              Object RESULT =null;
		System.out.println("listOfChars ::= CHAR COMMA listOfChars");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfChars",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listOfChars ::= CHAR 
            {
              Object RESULT =null;
		System.out.println("listOfChars ::= CHAR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfChars",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listOfListsOfChars ::= charList COMMA listOfListsOfChars 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfChars ::= charList COMMA listOfListsOfChars");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfChars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listOfListsOfChars ::= charList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfChars ::= charList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfChars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // charList ::= LBRACK listOfListsOfChars RBRACK 
            {
              Object RESULT =null;
		System.out.println("charList ::= LBRACK listOfListsOfChars RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // charList ::= LBRACK listOfChars RBRACK 
            {
              Object RESULT =null;
		System.out.println("charList ::= LBRACK listOfChars RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listOfBools ::= BOOL COMMA listOfBools 
            {
              Object RESULT =null;
		System.out.println("listOfBools ::= BOOL COMMA listOfBools");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfBools",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listOfBools ::= BOOL 
            {
              Object RESULT =null;
		System.out.println("listOfFloats ::= BOOL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfBools",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listOfListsOfBools ::= boolList COMMA listOfListsOfBools 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfBools ::= boolList COMMA listOfListsOfBools");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfBools",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listOfListsOfBools ::= boolList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfBools ::= boolList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfBools",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolList ::= LBRACK listOfListsOfBools RBRACK 
            {
              Object RESULT =null;
		System.out.println("boolList ::= LBRACK listOfListsOfBools RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolList ::= LBRACK listOfBools RBRACK 
            {
              Object RESULT =null;
		System.out.println("boolList ::= LBRACK listOfBoolss RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listOfFloats ::= FLOAT COMMA listOfFloats 
            {
              Object RESULT =null;
		System.out.println("listOfFloats ::= FLOAT COMMA listOfFloats");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfFloats",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listOfFloats ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("listOfFloats ::= FLOAT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfFloats",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listOfListsOfFloats ::= floatList COMMA listOfListsOfFloats 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfFloats ::= floatList COMMA listOfListsOfFloats");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfFloats",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listOfListsOfFloats ::= floatList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfFloats ::= floatList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfFloats",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // floatList ::= LBRACK listOfListsOfFloats RBRACK 
            {
              Object RESULT =null;
		System.out.println("floatList ::= LBRACK listOfListsOfFloats RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // floatList ::= LBRACK listOfFloats RBRACK 
            {
              Object RESULT =null;
		System.out.println("floatList ::= LBRACK listOfFloats RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listOfIntegers ::= INTEGER COMMA listOfIntegers 
            {
              Object RESULT =null;
		System.out.println("listOfIntegers ::= INTEGER COMMA listOfIntegers");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfIntegers",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listOfIntegers ::= INTEGER 
            {
              Object RESULT =null;
		System.out.println("listOfIntegers ::= INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfIntegers",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listOfListsOfIntegers ::= integerList COMMA listOfListsOfIntegers 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfIntegers ::= integerList COMMA listOfListsOfIntegers ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfIntegers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listOfListsOfIntegers ::= integerList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfIntegers ::= integerList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfIntegers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // integerList ::= LBRACK listOfListsOfIntegers RBRACK 
            {
              Object RESULT =null;
		System.out.println("integerList ::= LBRACK listOfListsOfIntegers RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integerList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // integerList ::= LBRACK listOfIntegers RBRACK 
            {
              Object RESULT =null;
		System.out.println("integerList ::= LBRACK listOfIntegers RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integerList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listOfStrings ::= STRING COMMA listOfStrings 
            {
              Object RESULT =null;
		System.out.println("listOfStrings ::= STRING COMMA listOfStrings");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfStrings",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listOfStrings ::= STRING 
            {
              Object RESULT =null;
		System.out.println("listOfStrings ::= STRING");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfStrings",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listOfListsOfStrings ::= stringList COMMA listOfListsOfStrings 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfStrings ::= stringList COMMA listOfListsOfStrings");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfStrings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listOfListsOfStrings ::= stringList 
            {
              Object RESULT =null;
		System.out.println("listOfListsOfStrings ::= stringList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfStrings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stringList ::= LBRACK listOfListsOfStrings RBRACK 
            {
              Object RESULT =null;
		System.out.println("stringList ::= LBRACK listOfListsOfStrings RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stringList ::= LBRACK listOfStrings RBRACK 
            {
              Object RESULT =null;
		System.out.println("stringList ::= LBRACK listOfStrings RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // emptyList ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		System.out.println("emptyList ::= LBRACK RBRACK");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list ::= boolList 
            {
              Object RESULT =null;
		System.out.println("list ::= boolList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list ::= charList 
            {
              Object RESULT =null;
		System.out.println("list ::= charList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list ::= floatList 
            {
              Object RESULT =null;
		System.out.println("list ::= floatList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list ::= integerList 
            {
              Object RESULT =null;
		System.out.println("list ::= integerList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list ::= stringList 
            {
              Object RESULT =null;
		System.out.println("list ::= stringList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list ::= emptyList 
            {
              Object RESULT =null;
		System.out.println("list ::= emptyList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valuelist ::= valuelist COMMA value 
            {
              Object RESULT =null;
		 System.out.println("valuelist ::= valuelist value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valuelist ::= value 
            {
              Object RESULT =null;
		 System.out.println("valuelist ::= value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // value ::= tuple 
            {
              Object RESULT =null;
		 System.out.println("value ::= tuple"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // value ::= list 
            {
              Object RESULT =null;
		 System.out.println("value ::= list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // value ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("value ::= STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // value ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("value ::= CHAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // value ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("value ::= FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // value ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("value ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // value ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("value ::= BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // qualified_name ::= list_index 
            {
              Object RESULT =null;
		System.out.println("qualified_name ::= list_index");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_name",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // qualified_name ::= name DOT ID 
            {
              Object RESULT =null;
		System.out.println("qualified_name ::= name DOT ID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_name",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // simple_name ::= ID 
            {
              Object RESULT =null;
		System.out.println("simple_name ::= ID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= qualified_name 
            {
              Object RESULT =null;
		System.out.println("name ::= qualified_name");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // name ::= simple_name 
            {
              Object RESULT =null;
		System.out.println("name ::= simple_name");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


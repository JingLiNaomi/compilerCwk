
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 06 22:28:57 GMT 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 06 22:28:57 GMT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\003\003\000\002\004\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\004\000\002\022\005\000\002\022\005" +
    "\000\002\014\003\000\002\014\005\000\002\031\003\000" +
    "\002\031\005\000\002\024\005\000\002\024\005\000\002" +
    "\015\003\000\002\015\005\000\002\027\003\000\002\027" +
    "\005\000\002\023\005\000\002\023\005\000\002\016\003" +
    "\000\002\016\005\000\002\030\003\000\002\030\005\000" +
    "\002\025\005\000\002\025\005\000\002\017\003\000\002" +
    "\017\005\000\002\026\003\000\002\026\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\032\003\000" +
    "\002\032\005\000\002\037\006\000\002\034\003\000\002" +
    "\034\007\000\002\034\011\000\002\036\002\000\002\036" +
    "\003\000\002\035\002\000\002\035\003\000\002\040\006" +
    "\000\002\040\006\000\002\041\006\000\002\042\010\000" +
    "\002\042\007\000\002\042\007\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\047\005\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\056\003\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\066\015" +
    "\000\002\067\014\000\002\074\004\000\002\071\005\000" +
    "\002\071\007\000\002\072\003\000\002\072\005\000\002" +
    "\073\006\000\002\057\006\000\002\057\006\000\002\057" +
    "\006\000\002\060\012\000\002\061\006\000\002\062\002" +
    "\000\002\062\003\000\002\063\012\000\002\064\012\000" +
    "\002\065\005\000\002\065\005\000\002\076\003\000\002" +
    "\076\004\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\077\004\000\002\077\003" +
    "\000\002\010\003\000\002\010\004\000\002\007\007\000" +
    "\002\011\003\000\002\011\005\000\002\006\005\000\002" +
    "\100\004\000\002\100\005\000\002\075\003\000\002\075" +
    "\003\000\002\101\005\000\002\102\007\000\002\102\007" +
    "\000\002\102\007\000\002\102\007\000\002\102\007\000" +
    "\002\102\007\000\002\102\007\000\002\102\007\000\002" +
    "\020\003\000\002\020\004\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\014\017\014\045\013\047\005\050\004\051" +
    "\022\001\002\000\004\033\362\001\002\000\004\035\353" +
    "\001\002\000\010\011\342\027\061\040\341\001\002\000" +
    "\020\002\uff81\017\uff81\034\uff81\045\uff81\047\uff81\050\uff81" +
    "\051\uff81\001\002\000\020\002\uff7d\017\uff7d\034\uff7d\045" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\001\002\000\054\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\027\uffff\030" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\001\002\000\054\004\000\005\000\006\000\007\000" +
    "\010\000\011\000\027\000\030\000\036\000\037\000\040" +
    "\000\041\000\054\000\055\000\056\000\057\000\060\000" +
    "\061\000\062\000\063\000\064\000\001\002\000\004\035" +
    "\224\001\002\000\056\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\027\ufff7\030\ufff7\035\216\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\001\002\000" +
    "\020\002\uff7a\017\uff7a\034\uff7a\045\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\001\002\000\004\037\215\001\002\000\004\011" +
    "\211\001\002\000\016\002\207\017\014\045\013\047\005" +
    "\050\004\051\022\001\002\000\020\002\uff7e\017\uff7e\034" +
    "\uff7e\045\uff7e\047\uff7e\050\uff7e\051\uff7e\001\002\000\016" +
    "\012\040\013\047\016\046\017\014\035\035\040\032\001" +
    "\002\000\020\002\uff7f\017\uff7f\034\uff7f\045\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\001\002\000\020\002\uff7c\017\uff7c\034" +
    "\uff7c\045\uff7c\047\uff7c\050\uff7c\051\uff7c\001\002\000\016" +
    "\030\uff96\036\uff96\037\uff96\054\065\055\053\056\064\001" +
    "\002\000\042\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\030\ufff3\032\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002\000\016" +
    "\030\uffa9\036\uffa9\037\uffa9\054\uffa9\055\uffa9\056\uffa9\001" +
    "\002\000\012\010\204\030\uff95\036\uff95\037\uff95\001\002" +
    "\000\042\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\030\ufff4\032\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\045\ufff4\047\ufff4\050\ufff4\051\ufff4\001\002\000\014\012" +
    "\156\013\141\014\145\040\155\041\147\001\002\000\042" +
    "\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\030\ufff2\032\ufff2\036\ufff2\037\ufff2\040\ufff2\045\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\001\002\000\042\004\057\005" +
    "\062\006\052\007\054\030\uffac\036\uffac\037\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\001\002\000\014\012\040\013\047\016\046" +
    "\017\014\035\035\001\002\000\044\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\030\uffbe\036\uffbe\037\uffbe\041\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\001\002\000\004\037\131\001\002\000\044" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\030\uffbc\036\uffbc\037" +
    "\uffbc\041\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\016\057" +
    "\122\060\125\061\124\062\123\063\120\064\126\001\002" +
    "\000\004\010\115\001\002\000\034\004\057\005\062\006" +
    "\052\007\054\030\uff97\036\uff97\037\uff97\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\042\010" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\030\ufff5\032\ufff5\036\ufff5\037\ufff5\040\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\001\002\000\010\054\065\055\053" +
    "\056\064\001\002\000\016\030\uffaa\036\uffaa\037\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\001\002\000\044\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\030\uffbd\036\uffbd\037\uffbd\041\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\001\002\000\012\010\uff9e\030\uff9e\036" +
    "\uff9e\037\uff9e\001\002\000\042\004\057\005\062\006\052" +
    "\007\054\010\056\027\061\037\055\054\065\055\053\056" +
    "\064\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad" +
    "\001\002\000\010\012\uffc1\013\uffc1\017\uffc1\001\002\000" +
    "\014\012\uffa7\013\uffa7\016\uffa7\017\uffa7\035\uffa7\001\002" +
    "\000\010\012\uffc0\013\uffc0\017\uffc0\001\002\000\020\002" +
    "\uff82\017\uff82\034\uff82\045\uff82\047\uff82\050\uff82\051\uff82" +
    "\001\002\000\006\017\111\040\032\001\002\000\010\012" +
    "\uffc2\013\uffc2\017\uffc2\001\002\000\010\012\040\013\047" +
    "\017\014\001\002\000\004\017\104\001\002\000\010\012" +
    "\uffbf\013\uffbf\017\uffbf\001\002\000\014\012\040\013\047" +
    "\016\046\017\014\035\071\001\002\000\014\012\uffa6\013" +
    "\uffa6\016\uffa6\017\uffa6\035\uffa6\001\002\000\014\012\uffa8" +
    "\013\uffa8\016\uffa8\017\uffa8\035\uffa8\001\002\000\044\004" +
    "\057\005\062\006\052\007\054\027\061\030\uffa3\036\uffa3" +
    "\037\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\001\002\000\016\030\uffa5" +
    "\036\uffa5\037\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000" +
    "\042\004\057\005\062\006\052\007\054\030\uffab\036\uffab" +
    "\037\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\001\002\000\012\012\040" +
    "\013\047\017\014\035\071\001\002\000\014\004\057\005" +
    "\062\006\052\007\054\027\061\001\002\000\012\004\057" +
    "\005\062\006\052\007\054\001\002\000\014\004\057\005" +
    "\062\006\052\007\054\036\076\001\002\000\010\012\040" +
    "\013\047\017\014\001\002\000\044\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\030\uffb5\036\uffb5\037\uffb5\041\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\001\002\000\046\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\027\061\030\uffb6\036\uffb6\037\uffb6\041\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\001\002\000\044\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\030\uffb7\036\uffb7\037\uffb7\041\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\001\002\000\010\012\040\013\047\017\014" +
    "\001\002\000\046\004\uffb9\005\uffb9\006\uffb9\007\uffb9\027" +
    "\061\030\uffb9\036\uffb9\037\uffb9\041\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\001\002\000\044\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\030\uffbb\036\uffbb\037\uffbb\041\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\001\002\000\054\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\027\ufff6\030\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\001\002\000\046\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\027\061\030\uffb8\036\uffb8\037" +
    "\uffb8\041\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\044\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\030\uffba\036\uffba\037\uffba" +
    "\041\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\001\002\000\014\010\uff9a" +
    "\027\061\030\uff9a\036\uff9a\037\uff9a\001\002\000\012\010" +
    "\uff9c\030\uff9c\036\uff9c\037\uff9c\001\002\000\014\010\ufff7" +
    "\027\ufff7\030\ufff7\036\ufff7\037\ufff7\001\002\000\014\012" +
    "\040\013\047\016\046\017\014\035\071\001\002\000\044" +
    "\004\057\005\062\006\052\007\054\027\061\030\uffa4\036" +
    "\uffa4\037\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\001\002\000\016\030" +
    "\uffa2\036\uffa2\037\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\006\017\111\040\032\001\002\000\014\010\uff9b\027" +
    "\061\030\uff9b\036\uff9b\037\uff9b\001\002\000\012\010\uff9d" +
    "\030\uff9d\036\uff9d\037\uff9d\001\002\000\012\012\uffae\013" +
    "\uffae\017\uffae\035\uffae\001\002\000\012\012\040\013\047" +
    "\017\014\035\071\001\002\000\012\012\uffb3\013\uffb3\017" +
    "\uffb3\035\uffb3\001\002\000\012\012\uffb0\013\uffb0\017\uffb0" +
    "\035\uffb0\001\002\000\012\012\uffaf\013\uffaf\017\uffaf\035" +
    "\uffaf\001\002\000\012\012\uffb1\013\uffb1\017\uffb1\035\uffb1" +
    "\001\002\000\012\012\uffb2\013\uffb2\017\uffb2\035\uffb2\001" +
    "\002\000\030\004\057\005\062\006\052\007\054\027\061" +
    "\030\uffad\036\uffad\037\uffad\054\uffad\055\uffad\056\uffad\001" +
    "\002\000\016\030\uffb4\036\uffb4\037\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\001\002\000\020\002\uff83\017\uff83\034\uff83\045" +
    "\uff83\047\uff83\050\uff83\051\uff83\001\002\000\036\004\057" +
    "\005\062\006\052\007\054\027\061\054\065\055\053\056" +
    "\064\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad" +
    "\001\002\000\030\004\057\005\062\006\052\007\054\036" +
    "\076\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\001\002\000\012\036\135\054\065\055\053\056\064\001" +
    "\002\000\016\030\uff9f\036\uff9f\037\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\001\002\000\014\012\040\013\047\016\046\017" +
    "\014\035\071\001\002\000\044\004\057\005\062\006\052" +
    "\007\054\027\061\030\uffa0\036\uffa0\037\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\016\030\uffa1\036\uffa1\037\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\001\002\000\006\030\202\041\uffe6" +
    "\001\002\000\004\041\201\001\002\000\004\041\200\001" +
    "\002\000\004\041\177\001\002\000\006\030\175\041\uffec" +
    "\001\002\000\004\041\174\001\002\000\042\010\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\030\ufff1" +
    "\032\ufff1\036\ufff1\037\ufff1\040\ufff1\045\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\001\002\000\006\030\171\041\uffe2\001\002" +
    "\000\006\030\166\041\uffe8\001\002\000\004\041\165\001" +
    "\002\000\006\030\162\041\uffee\001\002\000\004\041\161" +
    "\001\002\000\012\012\156\013\141\014\145\040\155\001" +
    "\002\000\006\030\157\041\uffe0\001\002\000\004\012\156" +
    "\001\002\000\004\041\uffdf\001\002\000\044\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\030\uffe3" +
    "\032\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\045\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\001\002\000\004\040\163\001\002" +
    "\000\006\014\145\040\163\001\002\000\004\041\uffed\001" +
    "\002\000\044\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\030\uffef\032\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\045\uffef\047\uffef\050\uffef\051\uffef\001\002" +
    "\000\004\040\167\001\002\000\006\013\141\040\167\001" +
    "\002\000\004\041\uffe7\001\002\000\004\040\173\001\002" +
    "\000\004\041\uffe1\001\002\000\006\012\156\040\173\001" +
    "\002\000\044\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\030\uffe9\032\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002" +
    "\000\004\014\145\001\002\000\004\041\uffeb\001\002\000" +
    "\044\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\030\uffe4\032\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\001\002\000\044" +
    "\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\030\ufff0\032\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\045\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\044\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\030\uffea\032\uffea\036\uffea\037\uffea\040\uffea\041\uffea\045" +
    "\uffea\047\uffea\050\uffea\051\uffea\001\002\000\004\013\141" +
    "\001\002\000\004\041\uffe5\001\002\000\006\017\111\040" +
    "\032\001\002\000\014\010\uff99\027\061\030\uff99\036\uff99" +
    "\037\uff99\001\002\000\012\010\uff98\030\uff98\036\uff98\037" +
    "\uff98\001\002\000\004\002\001\001\002\000\020\002\uff7b" +
    "\017\uff7b\034\uff7b\045\uff7b\047\uff7b\050\uff7b\051\uff7b\001" +
    "\002\000\016\012\040\013\047\016\046\017\014\035\035" +
    "\040\032\001\002\000\004\037\214\001\002\000\040\004" +
    "\057\005\062\006\052\007\054\010\056\027\061\054\065" +
    "\055\053\056\064\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\064\uffad\001\002\000\020\002\uff8a\017\uff8a\034\uff8a" +
    "\045\uff8a\047\uff8a\050\uff8a\051\uff8a\001\002\000\020\002" +
    "\uff80\017\uff80\034\uff80\045\uff80\047\uff80\050\uff80\051\uff80" +
    "\001\002\000\016\012\040\013\047\016\046\017\014\035" +
    "\035\040\032\001\002\000\004\036\223\001\002\000\006" +
    "\030\221\036\uff8f\001\002\000\016\012\040\013\047\016" +
    "\046\017\014\035\035\040\032\001\002\000\004\036\uff8e" +
    "\001\002\000\044\004\uff8d\005\uff8d\006\uff8d\007\uff8d\030" +
    "\uff8d\036\uff8d\037\uff8d\041\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001" +
    "\002\000\014\012\040\013\047\016\046\017\014\035\035" +
    "\001\002\000\012\036\226\054\065\055\053\056\064\001" +
    "\002\000\004\033\227\001\002\000\004\017\230\001\002" +
    "\000\004\031\245\001\002\000\004\034\236\001\002\000" +
    "\014\017\uff71\045\uff71\047\uff71\050\uff71\051\uff71\001\002" +
    "\000\014\017\014\045\013\047\005\050\004\051\022\001" +
    "\002\000\014\017\uff70\045\uff70\047\uff70\050\uff70\051\uff70" +
    "\001\002\000\016\017\014\034\uff92\045\013\047\005\050" +
    "\004\051\022\001\002\000\022\002\uff87\017\uff87\034\uff87" +
    "\045\uff87\046\237\047\uff87\050\uff87\051\uff87\001\002\000" +
    "\004\033\242\001\002\000\020\002\uff89\017\uff89\034\uff89" +
    "\045\uff89\047\uff89\050\uff89\051\uff89\001\002\000\020\002" +
    "\uff86\017\uff86\034\uff86\045\uff86\047\uff86\050\uff86\051\uff86" +
    "\001\002\000\004\017\230\001\002\000\004\034\244\001" +
    "\002\000\020\002\uff88\017\uff88\034\uff88\045\uff88\047\uff88" +
    "\050\uff88\051\uff88\001\002\000\022\017\254\020\256\021" +
    "\246\022\253\023\251\024\252\025\250\026\247\001\002" +
    "\000\016\011\337\017\ufffd\045\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\001\002\000\016\011\335\017\ufffb\045\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\001\002\000\016\011\333\017\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000\016\011\331" +
    "\017\ufffc\045\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000" +
    "\016\011\327\017\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\001\002\000\016\011\325\017\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\001\002\000\004\011\261\001\002\000\014" +
    "\017\uff6f\045\uff6f\047\uff6f\050\uff6f\051\uff6f\001\002\000" +
    "\016\011\257\017\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\001\002\000\004\012\260\001\002\000\014\017\uff67\045" +
    "\uff67\047\uff67\050\uff67\051\uff67\001\002\000\016\012\274" +
    "\013\262\014\265\015\273\016\263\040\271\001\002\000" +
    "\030\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63" +
    "\040\uff63\045\uff63\047\uff63\050\uff63\051\uff63\001\002\000" +
    "\030\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64" +
    "\040\uff64\045\uff64\047\uff64\050\uff64\051\uff64\001\002\000" +
    "\034\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\030\uffcf\032\uffcf\040\uffcf\045\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\030\012\uff60\013\uff60\014\uff60\015\uff60" +
    "\016\uff60\017\uff60\040\uff60\045\uff60\047\uff60\050\uff60\051" +
    "\uff60\001\002\000\030\012\uff5f\013\uff5f\014\uff5f\015\uff5f" +
    "\016\uff5f\017\uff5f\040\uff5f\045\uff5f\047\uff5f\050\uff5f\051" +
    "\uff5f\001\002\000\030\012\uff5e\013\uff5e\014\uff5e\015\uff5e" +
    "\016\uff5e\017\uff5e\040\uff5e\045\uff5e\047\uff5e\050\uff5e\051" +
    "\uff5e\001\002\000\030\012\uff66\013\uff66\014\uff66\015\uff66" +
    "\016\uff66\017\uff66\040\uff66\045\uff66\047\uff66\050\uff66\051" +
    "\uff66\001\002\000\016\012\156\013\141\014\145\032\276" +
    "\040\155\041\147\001\002\000\030\012\274\013\262\014" +
    "\265\015\273\016\263\017\uff6b\040\271\045\uff6b\047\uff6b" +
    "\050\uff6b\051\uff6b\001\002\000\030\012\uff61\013\uff61\014" +
    "\uff61\015\uff61\016\uff61\017\uff61\040\uff61\045\uff61\047\uff61" +
    "\050\uff61\051\uff61\001\002\000\030\012\uff62\013\uff62\014" +
    "\uff62\015\uff62\016\uff62\017\uff62\040\uff62\045\uff62\047\uff62" +
    "\050\uff62\051\uff62\001\002\000\030\012\uff65\013\uff65\014" +
    "\uff65\015\uff65\016\uff65\017\uff65\040\uff65\045\uff65\047\uff65" +
    "\050\uff65\051\uff65\001\002\000\020\012\307\013\277\014" +
    "\301\015\310\016\300\032\306\040\271\001\002\000\006" +
    "\030\uffd8\032\uffd8\001\002\000\006\030\uffd4\032\uffd4\001" +
    "\002\000\006\030\uffd6\032\uffd6\001\002\000\006\030\uffd3" +
    "\032\uffd3\001\002\000\006\030\uffd2\032\uffd2\001\002\000" +
    "\006\030\321\032\322\001\002\000\010\030\312\032\uffcc" +
    "\040\uffcc\001\002\000\004\041\311\001\002\000\006\030" +
    "\uffd7\032\uffd7\001\002\000\006\030\uffd5\032\uffd5\001\002" +
    "\000\034\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\030\uffd0\032\uffd0\040\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\001\002\000\006\032\uffcb\040\uffcb\001\002\000" +
    "\006\032\uffca\040\315\001\002\000\004\032\uffc9\001\002" +
    "\000\004\032\276\001\002\000\004\032\317\001\002\000" +
    "\004\041\320\001\002\000\034\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\030\uffcd\032\uffcd\040\uffcd\045" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\016\012\307" +
    "\013\277\014\301\015\310\016\300\040\032\001\002\000" +
    "\004\041\323\001\002\000\034\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\030\uffce\032\uffce\040\uffce\045" +
    "\uffce\047\uffce\050\uffce\051\uffce\001\002\000\006\030\uffd1" +
    "\032\uffd1\001\002\000\004\014\326\001\002\000\014\017" +
    "\uff6c\045\uff6c\047\uff6c\050\uff6c\051\uff6c\001\002\000\004" +
    "\040\032\001\002\000\014\017\uff69\045\uff69\047\uff69\050" +
    "\uff69\051\uff69\001\002\000\004\015\332\001\002\000\014" +
    "\017\uff6a\045\uff6a\047\uff6a\050\uff6a\051\uff6a\001\002\000" +
    "\004\040\315\001\002\000\014\017\uff6e\045\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\001\002\000\004\016\336\001\002\000" +
    "\014\017\uff68\045\uff68\047\uff68\050\uff68\051\uff68\001\002" +
    "\000\004\013\340\001\002\000\014\017\uff6d\045\uff6d\047" +
    "\uff6d\050\uff6d\051\uff6d\001\002\000\012\012\040\013\047" +
    "\017\014\035\071\001\002\000\016\012\040\013\047\016" +
    "\046\017\014\035\035\040\032\001\002\000\004\037\346" +
    "\001\002\000\042\004\057\005\062\006\052\007\054\010" +
    "\056\027\061\037\345\054\065\055\053\056\064\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\001\002\000" +
    "\020\002\uff8c\017\uff8c\034\uff8c\045\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\001\002\000\020\002\uff8b\017\uff8b\034\uff8b\045" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\001\002\000\014\004\057" +
    "\005\062\006\052\007\054\041\352\001\002\000\014\004" +
    "\057\005\062\006\052\007\054\041\351\001\002\000\004" +
    "\011\uffc7\001\002\000\004\011\uffc8\001\002\000\014\012" +
    "\040\013\047\016\046\017\014\035\035\001\002\000\012" +
    "\036\355\054\065\055\053\056\064\001\002\000\004\053" +
    "\356\001\002\000\004\033\357\001\002\000\004\017\230" +
    "\001\002\000\004\034\361\001\002\000\020\002\uff85\017" +
    "\uff85\034\uff85\045\uff85\047\uff85\050\uff85\051\uff85\001\002" +
    "\000\004\017\230\001\002\000\004\034\364\001\002\000" +
    "\004\052\365\001\002\000\004\035\366\001\002\000\014" +
    "\012\040\013\047\016\046\017\014\035\035\001\002\000" +
    "\012\036\370\054\065\055\053\056\064\001\002\000\020" +
    "\002\uff84\017\uff84\034\uff84\045\uff84\047\uff84\050\uff84\051" +
    "\uff84\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\032\002\005\003\011\004\010\040\016\057" +
    "\006\060\022\063\020\064\007\065\023\073\015\076\014" +
    "\077\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\005\003\011\004\010\040\016\057\006\060" +
    "\022\063\020\064\007\065\023\073\015\076\207\001\001" +
    "\000\002\001\001\000\046\002\050\003\011\004\010\012" +
    "\047\013\043\022\030\023\032\024\025\044\042\045\033" +
    "\046\036\047\026\050\040\052\024\053\044\055\027\056" +
    "\041\073\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\151" +
    "\015\145\016\153\022\152\023\147\024\150\027\141\030" +
    "\143\031\142\001\001\000\002\001\001\000\004\043\100" +
    "\001\001\000\026\002\131\003\011\004\010\044\132\045" +
    "\033\047\026\050\040\052\133\053\044\073\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\120\001\001\000\002\001\001\000\004\043\074" +
    "\001\001\000\002\001\001\000\004\054\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\057\054\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\106" +
    "\003\011\004\010\012\047\013\043\022\030\023\032\024" +
    "\025\056\107\001\001\000\002\001\001\000\014\002\104" +
    "\003\011\004\010\045\105\073\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\065\003\011\004\010" +
    "\044\067\045\033\047\026\050\040\053\066\073\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\057" +
    "\001\001\000\002\001\001\000\004\043\074\001\001\000" +
    "\016\002\071\003\011\004\010\044\073\045\072\073\035" +
    "\001\001\000\004\043\057\001\001\000\004\043\100\001" +
    "\001\000\004\043\074\001\001\000\014\002\076\003\011" +
    "\004\010\045\077\073\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\101\003\011" +
    "\004\010\045\102\073\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\112\003\011\004\010\044\067\045\033" +
    "\047\026\050\040\053\113\073\035\001\001\000\004\043" +
    "\057\001\001\000\002\001\001\000\024\002\115\003\011" +
    "\004\010\012\047\013\043\022\030\023\032\024\025\056" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\126\003\011\004\010\044\067\045" +
    "\033\050\127\073\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\057\054\062\001\001\000\004\043" +
    "\074\001\001\000\004\054\135\001\001\000\002\001\001" +
    "\000\024\002\136\003\011\004\010\044\067\045\033\047" +
    "\026\050\040\053\137\073\035\001\001\000\004\043\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\151\015\145\016\153\022\152\023" +
    "\147\024\150\027\141\030\143\031\142\001\001\000\002" +
    "\001\001\000\004\030\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\163\022\152\001\001\000\010" +
    "\014\151\022\152\031\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\167\024\150\001\001\000\010" +
    "\015\145\024\150\027\141\001\001\000\002\001\001\000" +
    "\006\016\171\023\147\001\001\000\002\001\001\000\010" +
    "\016\153\023\147\030\143\001\001\000\002\001\001\000" +
    "\004\031\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\202\001" +
    "\001\000\002\001\001\000\024\002\204\003\011\004\010" +
    "\012\047\013\043\022\030\023\032\024\025\056\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\212\003\011\004\010\012" +
    "\047\013\043\022\030\023\032\024\025\044\042\045\033" +
    "\046\211\047\026\050\040\052\024\053\044\055\027\056" +
    "\041\073\035\001\001\000\002\001\001\000\006\043\057" +
    "\054\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\212\003\011\004\010\012\047\013\043\022\030" +
    "\023\032\024\025\044\042\045\033\046\217\047\026\050" +
    "\040\052\024\053\044\055\027\056\041\072\216\073\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\212\003\011\004\010\012\047\013\043\022\030\023\032" +
    "\024\025\044\042\045\033\046\217\047\026\050\040\052" +
    "\024\053\044\055\027\056\041\072\221\073\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\131\003" +
    "\011\004\010\044\067\045\033\047\026\050\040\052\224" +
    "\053\044\073\035\001\001\000\004\054\135\001\001\000" +
    "\002\001\001\000\012\074\230\075\232\101\231\102\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\005\003\011\004\010\040\016\057\006" +
    "\060\022\063\020\064\007\065\023\073\015\076\014\077" +
    "\234\001\001\000\002\001\001\000\030\002\005\003\011" +
    "\004\010\040\016\057\006\060\022\063\020\064\007\065" +
    "\023\073\015\076\207\001\001\000\006\061\240\062\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\074\242\075\232\101\231\102\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\265\013\043\020" +
    "\271\021\267\022\030\023\032\024\025\034\266\037\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\151\015\145\016\153\022" +
    "\152\023\147\024\150\027\141\030\143\031\142\001\001" +
    "\000\022\012\265\013\043\021\274\022\030\023\032\024" +
    "\025\034\266\037\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\301\013\043\022" +
    "\030\023\032\024\025\032\303\033\302\034\304\037\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\313\035\315\037\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\301\013\043\022\030\023" +
    "\032\024\025\033\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\327\013\043\022\030\023\032\024\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\333\037\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\071\003\011\004\010\044\347" +
    "\045\346\073\035\001\001\000\046\002\343\003\011\004" +
    "\010\012\047\013\043\022\030\023\032\024\025\044\042" +
    "\045\033\046\342\047\026\050\040\052\024\053\044\055" +
    "\027\056\041\073\035\001\001\000\002\001\001\000\006" +
    "\043\057\054\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\100\001\001\000\004\043\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\131\003" +
    "\011\004\010\044\067\045\033\047\026\050\040\052\353" +
    "\053\044\073\035\001\001\000\004\054\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\074\357\075\232" +
    "\101\231\102\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\074\362\075\232\101\231\102\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\131\003\011\004\010\044\067\045\033\047\026" +
    "\050\040\052\366\053\044\073\035\001\001\000\004\054" +
    "\135\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // value ::= tuple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // value ::= list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // value ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // value ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // value ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // value ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // value ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // valuelist ::= valuelist value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // valuelist ::= value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valuelist",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // var_declr_init ::= ID COLON FLOATTYPE ASSIGN FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // var_declr_init ::= ID COLON BOOLTYPE ASSIGN BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // var_declr_init ::= ID COLON LISTTYPE ASSIGN list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // var_declr_init ::= ID COLON CHARTYPE ASSIGN CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // var_declr_init ::= ID COLON ID ASSIGN valuelist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // var_declr_init ::= ID COLON STRINGTYPE ASSIGN STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // var_declr_init ::= ID COLON INTEGERTYPE ASSIGN INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // var_declr_init ::= ID COLON TUPLETYPE ASSIGN tuple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr_init",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // var_single_declr ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_single_declr",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // var_declr ::= var_declr_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // var_declr ::= var_single_declr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declr",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // vardeclist ::= vardeclist var_declr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // vardeclist ::= var_declr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardeclist",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // element ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // elementlist ::= elementlist COMMA element 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // elementlist ::= element 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // typedecl ::= TDEF ID COLON elementlist SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // typedeclist ::= typedeclist typedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedeclist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // typedeclist ::= typedecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedeclist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // statement ::= repeat_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // statement ::= func_call SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // return_statement ::= RETURN name SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // return_statement ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // repeat_statement ::= REPEAT LCBRACK body RCBRACK UNTIL LPAREN bool_exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // while_statement ::= WHILE LPAREN bool_exp RPAREN DO LCBRACK body RCBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // else_opt ::= else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // else_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // else_statement ::= ELSE LCBRACK body RCBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_statement ::= IF LPAREN bool_exp RPAREN LCBRACK body RCBRACK else_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment ::= list_index ASSIGN expression SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignment ::= name ASSIGN expression SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignment ::= name ASSIGN name SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // func_call ::= ID LPAREN actual_param_list RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // actual_param_list ::= expression COMMA actual_param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // actual_param_list ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // param_list ::= name COLON type COMMA param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // param_list ::= name COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // body ::= var_declr statement_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // func_def_noretrn ::= FDEF name LPAREN param_list RPAREN COLON type LCBRACK func_body RCBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def_noretrn",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // func_def_retrn ::= FDEF name LPAREN param_list RPAREN COLON type LCBRACK func_body return_statement RCBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def_retrn",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= concat_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= bool_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= ar_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // concat_expr ::= concat_expr CONCAT concat_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concat_expr ::= concat_expr CONCAT name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concat_expr ::= name CONCAT name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // concat_expr ::= concat_operand CONCAT name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // concat_expr ::= name CONCAT concat_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // concat_expr ::= concat_operand CONCAT concat_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // concat_operand ::= list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat_operand",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bool_exp ::= LPAREN bool_exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_exp ::= bool_exp logic_operation name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_exp ::= bool_exp logic_operation bool_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bool_exp ::= bool_operand logic_operation bool_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bool_exp ::= name logic_operation name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bool_exp ::= bool_operand logic_operation name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bool_exp ::= name logic_operation bool_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // logic_operation ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logic_operation ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logic_operation ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bool_operand ::= comparison_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operand",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bool_operand ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operand",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comp_operand ::= ar_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_operand",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comp_operand ::= ar_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_operand",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comp_operand ::= name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_operand",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparison_op ::= GREATEREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparison_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparison_op ::= LESSEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparison_op ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparison_op ::= NEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparison_op ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparison_exp ::= comp_operand comparison_op comp_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_exp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ar_expression ::= LPAREN ar_expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ar_expression ::= ar_expression ar_operation name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ar_expression ::= ar_expression ar_operation ar_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ar_expression ::= name ar_operation name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ar_expression ::= ar_operand ar_operation name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ar_expression ::= name ar_operation ar_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ar_expression ::= ar_operand ar_operation ar_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ar_operand ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ar_operand ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ar_operand ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ar_operation ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ar_operation ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ar_operation ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ar_operation ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ar_operation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sequence_slicing ::= name LBRACK ar_expression COLON RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_slicing",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sequence_slicing ::= name LBRACK COLON ar_expression RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_slicing",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sequence_slicing ::= name LBRACK ar_expression COLON ar_expression RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_slicing",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sequence_len ::= LEN LPAREN name RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_len",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list_index ::= name LBRACK ar_expression RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_index",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_index ::= name LBRACK ar_operand RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_index",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tuple_op ::= tuple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tuple_op ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comma_op ::= COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comma_op ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tuple ::= LBRACK STROKE tuple comma_op tuple_op STROKE RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tuple ::= LBRACK STROKE listOfAnyElements STROKE RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tuple ::= emptyTuple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // emptyTuple ::= LBRACK STROKE STROKE RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyTuple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listOfAnyElements ::= listOfAnyElements COMMA anyElement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfAnyElements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listOfAnyElements ::= anyElement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfAnyElements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // anyElement ::= list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // anyElement ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // anyElement ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // anyElement ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // anyElement ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // anyElement ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anyElement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listOfChars ::= CHAR COMMA listOfChars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfChars",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listOfChars ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfChars",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listOfListsOfChars ::= charList COMMA listOfListsOfChars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfChars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listOfListsOfChars ::= charList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfChars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // charList ::= LBRACK listOfListsOfChars RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // charList ::= LBRACK listOfChars RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listOfFloats ::= FLOAT COMMA listOfFloats 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfFloats",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listOfFloats ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfFloats",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listOfListsOfFloats ::= floatList COMMA listOfListsOfFloats 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfFloats",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listOfListsOfFloats ::= floatList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfFloats",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // floatList ::= LBRACK listOfListsOfFloats RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // floatList ::= LBRACK listOfFloats RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listOfIntegers ::= INTEGER COMMA listOfIntegers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfIntegers",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listOfIntegers ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfIntegers",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listOfListsOfIntegers ::= integerList COMMA listOfListsOfIntegers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfIntegers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listOfListsOfIntegers ::= integerList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfIntegers",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // integerList ::= LBRACK listOfListsOfIntegers RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("integerList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // integerList ::= LBRACK listOfIntegers RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("integerList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listOfStrings ::= STRING COMMA listOfStrings 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfStrings",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listOfStrings ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfStrings",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listOfListsOfStrings ::= stringList COMMA listOfListsOfStrings 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfStrings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listOfListsOfStrings ::= stringList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOfListsOfStrings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stringList ::= LBRACK listOfListsOfStrings RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stringList ::= LBRACK listOfStrings RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // emptyList ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list ::= floatList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list ::= integerList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // list ::= stringList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list ::= emptyList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // qualified_name ::= name DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_name",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_name ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TUPLETYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= LISTTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= BOOLTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= CHARTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FLOATTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= qualified_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // name ::= simple_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

